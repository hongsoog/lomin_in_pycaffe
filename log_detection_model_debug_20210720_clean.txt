GeneralizedRCNN.__init(self, cfg) ====================== BEGIN
	super(GeneralizedRCNN, self).__init__()

	==== backbone build ====
	self.backbone = build_backbone(cfg)
build_resnet_fpn_p3p7_backbone(cfg) ====== BEGIN
	body = resnet.ResNet(cfg)


=========================================== Resnet.__init__ BEGIN

	=========================================== Resnet.__freeze_backbone() START
	=========================================== Resnet.__freeze_backbone() END

=========================================== Resnet.__init__ END

	in_channels_stage2 = 256
	out_channels = 1024
	in_channels_p6p7 = 2048

	fpn = fpn_module.FPN()

		conv_with_kaiming_uniform(use_gn=False, use_relut=False) ======== BEGIN
			return make_conv
		tconv_with_kaiming_uniform(use_gn=False, use_relut=False) ======== END



		LastLevelP6P7.__init__(self, in_channels=2048, out_channels=1024) ====== BEGIN
			super(LastLevelP6P7, self).__init__()
			self.p6 = nn.Conv2d(in_channels=2048, out_channels=1024, 3, 2, 1)
			self.p7 = nn.Conv2d(out_channels=1024, out_channels=1024, 3, 2, 1)
			for module in [self.p6, self.p7]:
				module=Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
				nn.init.kaiming_uniform_(module.weight=module.weight, a=1)
				nn.init.constant_(module.bias=module.bias, 0)
				module=Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
				nn.init.kaiming_uniform_(module.weight=module.weight, a=1)
				nn.init.constant_(module.bias=module.bias, 0)
			self.use_p5 : False

		LastLevelP6P7.__init__(self, in_channels=2048, out_channels=1024) ====== END




=========================================== FPN.__init__ begin
	======constructor params
		in_channels_list: [0, 512, 1024, 2048]
		out_channels: 1024
		conv_block: <function conv_with_kaiming_uniform.<locals>.make_conv at 0x7f2664b6a950>
		top_blocks: LastLevelP6P7(
  (p6): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
	======constructor params
	super(FPN, self).__init__()

	for idx, in_channels in enumerate(in_channels_list, 1):

		==> iteration with idx:1, in_channels:0
		if in_channels ==0, skip


		==> iteration with idx:2, in_channels:512
		inner_block: fpn_inner2
		layer_block: fpn_layer2
		inner_block_module = conv_block(in_channels=512, out_channels=1024, 1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=512, out_channels=1024, kernel_size=1, stride=1
				       padding=0, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		layer_block_module = conv_block(out_channels=1024, out_channels=1024, 3,1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=1024, out_channels=1024, kernel_size=3, stride=1
				       padding=1, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		self.add_module(fpn_inner2, inner_block_module)
		self.add_module(fpn_layer2, layer_block_module)
		self.inner_blocks.append(fpn_inner2)
		self.layer_blocks.append(fpn_layer2)

		==> iteration with idx:3, in_channels:1024
		inner_block: fpn_inner3
		layer_block: fpn_layer3
		inner_block_module = conv_block(in_channels=1024, out_channels=1024, 1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=1024, out_channels=1024, kernel_size=1, stride=1
				       padding=0, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		layer_block_module = conv_block(out_channels=1024, out_channels=1024, 3,1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=1024, out_channels=1024, kernel_size=3, stride=1
				       padding=1, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		self.add_module(fpn_inner3, inner_block_module)
		self.add_module(fpn_layer3, layer_block_module)
		self.inner_blocks.append(fpn_inner3)
		self.layer_blocks.append(fpn_layer3)

		==> iteration with idx:4, in_channels:2048
		inner_block: fpn_inner4
		layer_block: fpn_layer4
		inner_block_module = conv_block(in_channels=2048, out_channels=1024, 1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=2048, out_channels=1024, kernel_size=1, stride=1
				       padding=0, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		layer_block_module = conv_block(out_channels=1024, out_channels=1024, 3,1)

			conv_with_kaiming_uniform().make_conv() ====== BEGIN
				Conv2d(in_channles=1024, out_channels=1024, kernel_size=3, stride=1
				       padding=1, dilation=1, bias=True,
				nn.init.kaiming_uniform_(conv.weight, a=1)
				if not use_gn:
					nn.init.constant_(conv.bias, 0)
				module = [conv,]
				return conv

			conv_with_kaiming_uniform().make_conv() ====== END

		self.add_module(fpn_inner4, inner_block_module)
		self.add_module(fpn_layer4, layer_block_module)
		self.inner_blocks.append(fpn_inner4)
		self.layer_blocks.append(fpn_layer4)

	self.inner_blocks: ['fpn_inner2', 'fpn_inner3', 'fpn_inner4']
		self.fpn_inner2: Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
		self.fpn_inner3: Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
		self.fpn_inner4: Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))

	self.layer_blocks: ['fpn_layer2', 'fpn_layer3', 'fpn_layer4']
		self.fpn_layer2: Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fpn_layer3: Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		self.fpn_layer4: Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

	self.top_blocks: LastLevelP6P7(
  (p6): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
=========================================== FPN.__init__ end


	model = nn.Sequential(OrderedDict([("body", body), ("fpn", fpn)]))
	model.out_channels = 1024
	return model
build_resnet_fpn_p3p7_backbone(cfg) ====== END


==== rpn build ==== 
self.backbone.out_channels: 1024
self.rpn = build_rpn(cfg, self.backbone.out_channels)


=========================================== RetinaNetModule.__init__(self, cfg, in_channels): BEGIN
	super(RetinaNetModule, self).__init__()
	anchor_generator = make_anchor_generator_retinanet(cfg)
=================   make_anchor_generator_retinanet(config) BEGIN
=================   AnchorGenerator.__init__(sizes, apect_ratios, anchor_strides, straddle_thresh) BEGIN
	Params
		sizes: ((32.0, 40.31747359663594, 50.79683366298238), (64.0, 80.63494719327188, 101.59366732596476), (128.0, 161.26989438654377, 203.18733465192952), (256.0, 322.53978877308754, 406.37466930385904), (512.0, 645.0795775461751, 812.7493386077181))
		aspect_ratios: (0.5, 1.0, 2.0)
		anchor_strides: (8, 16, 32, 64, 128)
		straddle_thresh: -1
=================   generate_anchors(stride, sizes, apect_ratios) BEGIN
	Params:
		stride: 8
		sizes: (32.0, 40.31747359663594, 50.79683366298238)
		aspect_ratios: (0.5, 1.0, 2.0)
return _generate_anchors(stride, 
     np.array(sizes, dtype=np.float) / stride,
     np.array(aspect_ratios, dtype=np.float),
=================   generate_anchors(stride, sizes, apect_ratios) END
=================   _generate_anchors(base_size, scales, apect_ratios) BEGIN
=================   _ratio_enum(anchor, ratios) BEGIN
	Param:
		anchor: [0. 0. 7. 7.]
		ratios: [0.5 1.  2. ]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [0. 0. 7. 7.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [11.  8.  6.]
		hs: [ 6.  8. 12.]
		x_ctr: 3.5
		y_ctr: 3.5
anchors: [[-1.5  1.   8.5  6. ]
 [ 0.   0.   7.   7. ]
 [ 1.  -2.   6.   9. ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-1.5  1.   8.5  6. ]
 [ 0.   0.   7.   7. ]
 [ 1.  -2.   6.   9. ]]
return anchors
=================   _ratio_enum(anchor, ratios) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [-1.5  1.   8.5  6. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [-1.5  1.   8.5  6. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [44.         55.4365262  69.84564629]
		hs: [24.         30.2381052  38.09762525]
		x_ctr: 3.5
		y_ctr: 3.5
anchors: [[-18.          -8.          25.          15.        ]
 [-23.7182631  -11.1190526   30.7182631   18.1190526 ]
 [-30.92282314 -15.04881262  37.92282314  22.04881262]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-18.          -8.          25.          15.        ]
 [-23.7182631  -11.1190526   30.7182631   18.1190526 ]
 [-30.92282314 -15.04881262  37.92282314  22.04881262]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [0. 0. 7. 7.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [0. 0. 7. 7.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [32.         40.3174736  50.79683366]
		hs: [32.         40.3174736  50.79683366]
		x_ctr: 3.5
		y_ctr: 3.5
anchors: [[-12.         -12.          19.          19.        ]
 [-16.1587368  -16.1587368   23.1587368   23.1587368 ]
 [-21.39841683 -21.39841683  28.39841683  28.39841683]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-12.         -12.          19.          19.        ]
 [-16.1587368  -16.1587368   23.1587368   23.1587368 ]
 [-21.39841683 -21.39841683  28.39841683  28.39841683]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 1. -2.  6.  9.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 1. -2.  6.  9.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [24.         30.2381052  38.09762525]
		hs: [48.         60.47621039 76.19525049]
		x_ctr: 3.5
		y_ctr: 3.5
anchors: [[ -8.         -20.          15.          27.        ]
 [-11.1190526  -26.2381052   18.1190526   33.2381052 ]
 [-15.04881262 -34.09762525  22.04881262  41.09762525]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[ -8.         -20.          15.          27.        ]
 [-11.1190526  -26.2381052   18.1190526   33.2381052 ]
 [-15.04881262 -34.09762525  22.04881262  41.09762525]]
=================   _scale_enum(anchor, scales) END
return torch.from_numpy(anchors)
=================   _generate_anchors(base_size, scales, apect_ratios) END
=================   generate_anchors(stride, sizes, apect_ratios) BEGIN
	Params:
		stride: 16
		sizes: (64.0, 80.63494719327188, 101.59366732596476)
		aspect_ratios: (0.5, 1.0, 2.0)
return _generate_anchors(stride, 
     np.array(sizes, dtype=np.float) / stride,
     np.array(aspect_ratios, dtype=np.float),
=================   generate_anchors(stride, sizes, apect_ratios) END
=================   _generate_anchors(base_size, scales, apect_ratios) BEGIN
=================   _ratio_enum(anchor, ratios) BEGIN
	Param:
		anchor: [ 0.  0. 15. 15.]
		ratios: [0.5 1.  2. ]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 15. 15.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [23. 16. 11.]
		hs: [12. 16. 22.]
		x_ctr: 7.5
		y_ctr: 7.5
anchors: [[-3.5  2.  18.5 13. ]
 [ 0.   0.  15.  15. ]
 [ 2.5 -3.  12.5 18. ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-3.5  2.  18.5 13. ]
 [ 0.   0.  15.  15. ]
 [ 2.5 -3.  12.5 18. ]]
return anchors
=================   _ratio_enum(anchor, ratios) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [-3.5  2.  18.5 13. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [-3.5  2.  18.5 13. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [ 92.         115.91273659 146.04089678]
		hs: [48.         60.47621039 76.19525049]
		x_ctr: 7.5
		y_ctr: 7.5
anchors: [[-38.         -16.          53.          31.        ]
 [-49.9563683  -22.2381052   64.9563683   37.2381052 ]
 [-65.02044839 -30.09762525  80.02044839  45.09762525]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-38.         -16.          53.          31.        ]
 [-49.9563683  -22.2381052   64.9563683   37.2381052 ]
 [-65.02044839 -30.09762525  80.02044839  45.09762525]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 0.  0. 15. 15.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 15. 15.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [ 64.          80.63494719 101.59366733]
		hs: [ 64.          80.63494719 101.59366733]
		x_ctr: 7.5
		y_ctr: 7.5
anchors: [[-24.         -24.          39.          39.        ]
 [-32.3174736  -32.3174736   47.3174736   47.3174736 ]
 [-42.79683366 -42.79683366  57.79683366  57.79683366]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-24.         -24.          39.          39.        ]
 [-32.3174736  -32.3174736   47.3174736   47.3174736 ]
 [-42.79683366 -42.79683366  57.79683366  57.79683366]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 2.5 -3.  12.5 18. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 2.5 -3.  12.5 18. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [44.         55.4365262  69.84564629]
		hs: [ 88.         110.87305239 139.69129257]
		x_ctr: 7.5
		y_ctr: 7.5
anchors: [[-14.         -36.          29.          51.        ]
 [-19.7182631  -47.4365262   34.7182631   62.4365262 ]
 [-26.92282314 -61.84564629  41.92282314  76.84564629]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-14.         -36.          29.          51.        ]
 [-19.7182631  -47.4365262   34.7182631   62.4365262 ]
 [-26.92282314 -61.84564629  41.92282314  76.84564629]]
=================   _scale_enum(anchor, scales) END
return torch.from_numpy(anchors)
=================   _generate_anchors(base_size, scales, apect_ratios) END
=================   generate_anchors(stride, sizes, apect_ratios) BEGIN
	Params:
		stride: 32
		sizes: (128.0, 161.26989438654377, 203.18733465192952)
		aspect_ratios: (0.5, 1.0, 2.0)
return _generate_anchors(stride, 
     np.array(sizes, dtype=np.float) / stride,
     np.array(aspect_ratios, dtype=np.float),
=================   generate_anchors(stride, sizes, apect_ratios) END
=================   _generate_anchors(base_size, scales, apect_ratios) BEGIN
=================   _ratio_enum(anchor, ratios) BEGIN
	Param:
		anchor: [ 0.  0. 31. 31.]
		ratios: [0.5 1.  2. ]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 31. 31.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [45. 32. 23.]
		hs: [22. 32. 46.]
		x_ctr: 15.5
		y_ctr: 15.5
anchors: [[-6.5  5.  37.5 26. ]
 [ 0.   0.  31.  31. ]
 [ 4.5 -7.  26.5 38. ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-6.5  5.  37.5 26. ]
 [ 0.   0.  31.  31. ]
 [ 4.5 -7.  26.5 38. ]]
return anchors
=================   _ratio_enum(anchor, ratios) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [-6.5  5.  37.5 26. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [-6.5  5.  37.5 26. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [180.         226.78578898 285.73218935]
		hs: [ 88.         110.87305239 139.69129257]
		x_ctr: 15.5
		y_ctr: 15.5
anchors: [[ -74.          -28.          105.           59.        ]
 [ -97.39289449  -39.4365262   128.39289449   70.4365262 ]
 [-126.86609468  -53.84564629  157.86609468   84.84564629]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[ -74.          -28.          105.           59.        ]
 [ -97.39289449  -39.4365262   128.39289449   70.4365262 ]
 [-126.86609468  -53.84564629  157.86609468   84.84564629]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 0.  0. 31. 31.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 31. 31.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [128.         161.26989439 203.18733465]
		hs: [128.         161.26989439 203.18733465]
		x_ctr: 15.5
		y_ctr: 15.5
anchors: [[-48.         -48.          79.          79.        ]
 [-64.63494719 -64.63494719  95.63494719  95.63494719]
 [-85.59366733 -85.59366733 116.59366733 116.59366733]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-48.         -48.          79.          79.        ]
 [-64.63494719 -64.63494719  95.63494719  95.63494719]
 [-85.59366733 -85.59366733 116.59366733 116.59366733]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 4.5 -7.  26.5 38. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 4.5 -7.  26.5 38. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [ 92.         115.91273659 146.04089678]
		hs: [184.         231.82547318 292.08179356]
		x_ctr: 15.5
		y_ctr: 15.5
anchors: [[ -30.          -76.           61.          107.        ]
 [ -41.9563683   -99.91273659   72.9563683   130.91273659]
 [ -57.02044839 -130.04089678   88.02044839  161.04089678]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[ -30.          -76.           61.          107.        ]
 [ -41.9563683   -99.91273659   72.9563683   130.91273659]
 [ -57.02044839 -130.04089678   88.02044839  161.04089678]]
=================   _scale_enum(anchor, scales) END
return torch.from_numpy(anchors)
=================   _generate_anchors(base_size, scales, apect_ratios) END
=================   generate_anchors(stride, sizes, apect_ratios) BEGIN
	Params:
		stride: 64
		sizes: (256.0, 322.53978877308754, 406.37466930385904)
		aspect_ratios: (0.5, 1.0, 2.0)
return _generate_anchors(stride, 
     np.array(sizes, dtype=np.float) / stride,
     np.array(aspect_ratios, dtype=np.float),
=================   generate_anchors(stride, sizes, apect_ratios) END
=================   _generate_anchors(base_size, scales, apect_ratios) BEGIN
=================   _ratio_enum(anchor, ratios) BEGIN
	Param:
		anchor: [ 0.  0. 63. 63.]
		ratios: [0.5 1.  2. ]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 63. 63.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [91. 64. 45.]
		hs: [46. 64. 90.]
		x_ctr: 31.5
		y_ctr: 31.5
anchors: [[-13.5   9.   76.5  54. ]
 [  0.    0.   63.   63. ]
 [  9.5 -13.   53.5  76. ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-13.5   9.   76.5  54. ]
 [  0.    0.   63.   63. ]
 [  9.5 -13.   53.5  76. ]]
return anchors
=================   _ratio_enum(anchor, ratios) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [-13.5   9.   76.5  54. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [-13.5   9.   76.5  54. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [364.         458.61126216 577.81398292]
		hs: [184.         231.82547318 292.08179356]
		x_ctr: 31.5
		y_ctr: 31.5
anchors: [[-150.          -60.          213.          123.        ]
 [-197.30563108  -83.91273659  260.30563108  146.91273659]
 [-256.90699146 -114.04089678  319.90699146  177.04089678]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-150.          -60.          213.          123.        ]
 [-197.30563108  -83.91273659  260.30563108  146.91273659]
 [-256.90699146 -114.04089678  319.90699146  177.04089678]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 0.  0. 63. 63.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 0.  0. 63. 63.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [256.         322.53978877 406.3746693 ]
		hs: [256.         322.53978877 406.3746693 ]
		x_ctr: 31.5
		y_ctr: 31.5
anchors: [[ -96.          -96.          159.          159.        ]
 [-129.26989439 -129.26989439  192.26989439  192.26989439]
 [-171.18733465 -171.18733465  234.18733465  234.18733465]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[ -96.          -96.          159.          159.        ]
 [-129.26989439 -129.26989439  192.26989439  192.26989439]
 [-171.18733465 -171.18733465  234.18733465  234.18733465]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [  9.5 -13.   53.5  76. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [  9.5 -13.   53.5  76. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [180.         226.78578898 285.73218935]
		hs: [360.         453.57157796 571.46437871]
		x_ctr: 31.5
		y_ctr: 31.5
anchors: [[ -58.         -148.          121.          211.        ]
 [ -81.39289449 -194.78578898  144.39289449  257.78578898]
 [-110.86609468 -253.73218935  173.86609468  316.73218935]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[ -58.         -148.          121.          211.        ]
 [ -81.39289449 -194.78578898  144.39289449  257.78578898]
 [-110.86609468 -253.73218935  173.86609468  316.73218935]]
=================   _scale_enum(anchor, scales) END
return torch.from_numpy(anchors)
=================   _generate_anchors(base_size, scales, apect_ratios) END
=================   generate_anchors(stride, sizes, apect_ratios) BEGIN
	Params:
		stride: 128
		sizes: (512.0, 645.0795775461751, 812.7493386077181)
		aspect_ratios: (0.5, 1.0, 2.0)
return _generate_anchors(stride, 
     np.array(sizes, dtype=np.float) / stride,
     np.array(aspect_ratios, dtype=np.float),
=================   generate_anchors(stride, sizes, apect_ratios) END
=================   _generate_anchors(base_size, scales, apect_ratios) BEGIN
=================   _ratio_enum(anchor, ratios) BEGIN
	Param:
		anchor: [  0.   0. 127. 127.]
		ratios: [0.5 1.  2. ]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [  0.   0. 127. 127.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [181. 128.  91.]
		hs: [ 90. 128. 182.]
		x_ctr: 63.5
		y_ctr: 63.5
anchors: [[-26.5  19.  153.5 108. ]
 [  0.    0.  127.  127. ]
 [ 18.5 -27.  108.5 154. ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-26.5  19.  153.5 108. ]
 [  0.    0.  127.  127. ]
 [ 18.5 -27.  108.5 154. ]]
return anchors
=================   _ratio_enum(anchor, ratios) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [-26.5  19.  153.5 108. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [-26.5  19.  153.5 108. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [ 724.          912.18284012 1149.27836162]
		hs: [360.         453.57157796 571.46437871]
		x_ctr: 63.5
		y_ctr: 63.5
anchors: [[-298.         -116.          425.          243.        ]
 [-392.09142006 -162.78578898  519.09142006  289.78578898]
 [-510.63918081 -221.73218935  637.63918081  348.73218935]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-298.         -116.          425.          243.        ]
 [-392.09142006 -162.78578898  519.09142006  289.78578898]
 [-510.63918081 -221.73218935  637.63918081  348.73218935]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [  0.   0. 127. 127.]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [  0.   0. 127. 127.]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [512.         645.07957755 812.74933861]
		hs: [512.         645.07957755 812.74933861]
		x_ctr: 63.5
		y_ctr: 63.5
anchors: [[-192.         -192.          319.          319.        ]
 [-258.53978877 -258.53978877  385.53978877  385.53978877]
 [-342.3746693  -342.3746693   469.3746693   469.3746693 ]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-192.         -192.          319.          319.        ]
 [-258.53978877 -258.53978877  385.53978877  385.53978877]
 [-342.3746693  -342.3746693   469.3746693   469.3746693 ]]
=================   _scale_enum(anchor, scales) END
=================   _scale_enum(anchor, scales) BEGIN
	Param:
		anchor: [ 18.5 -27.  108.5 154. ]
		scales: [4.         5.0396842  6.34960421]
=================   _whctrs(anchors) BEGIN
	Param:
		anchor: [ 18.5 -27.  108.5 154. ]
return w, h, x_ctr, y_ctr
=================   _whctrs(anchors) END
=================   _mkanchors(ws, hs, x_ctr, y_ctr) BEGIN
	Param:
		ws: [364.         458.61126216 577.81398292]
		hs: [ 728.          917.22252432 1155.62796583]
		x_ctr: 63.5
		y_ctr: 63.5
anchors: [[-118.         -300.          245.          427.        ]
 [-165.30563108 -394.61126216  292.30563108  521.61126216]
 [-224.90699146 -513.81398292  351.90699146  640.81398292]]
return anchors
=================   _mkanchors(ws, hs, x_ctr, y_ctr) END
anchors: [[-118.         -300.          245.          427.        ]
 [-165.30563108 -394.61126216  292.30563108  521.61126216]
 [-224.90699146 -513.81398292  351.90699146  640.81398292]]
=================   _scale_enum(anchor, scales) END
return torch.from_numpy(anchors)
=================   _generate_anchors(base_size, scales, apect_ratios) END
	self.strides: (8, 16, 32, 64, 128)
	self.cel_anchors: BufferList()
	self.straddle_thresh: -1
=================   AnchorGenerator.__init__(sizes, apect_ratios, anchor_strides, straddle_thresh) END
return anchor_generator
=================   make_anchor_generator_retinanet(config) END
head = RetinaNetHead(cfg, in_channels=1024)


=========================================== RetinaNetHead._init__(cfg, in_channels): BEGIN


=========================================== RetinaNetHead._init__(cfg, in_channels): END
box_coder = BoxCoder(weights=(10., 10., 5., 5.))
box_selector_test = make_retinanet_postprocessor(cfg, box_coder)
========== RPNPostProcessing.__init__() BEGIN
========== RPNPostProcessing.__init__() END
self.anchor_generator = anchor_generator
self.head = head
self.box_selector_test = box_selector_test


=========================================== RetinaNetModule.__init__(self, cfg, in_channels): END
GeneralizedRCNN.__init(self, cfg) ====================== END
INFO:maskrcnn_benchmark.utils.checkpoint:Loading checkpoint from ./model/detection/model_det_v2_200924_002_180k.pth
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn1.bias                  loaded from backbone.body.layer1.0.bn1.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn1.running_mean          loaded from backbone.body.layer1.0.bn1.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn1.running_var           loaded from backbone.body.layer1.0.bn1.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn1.weight                loaded from backbone.body.layer1.0.bn1.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn2.bias                  loaded from backbone.body.layer1.0.bn2.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn2.running_mean          loaded from backbone.body.layer1.0.bn2.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn2.running_var           loaded from backbone.body.layer1.0.bn2.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn2.weight                loaded from backbone.body.layer1.0.bn2.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn3.bias                  loaded from backbone.body.layer1.0.bn3.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn3.running_mean          loaded from backbone.body.layer1.0.bn3.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn3.running_var           loaded from backbone.body.layer1.0.bn3.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.bn3.weight                loaded from backbone.body.layer1.0.bn3.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.conv1.weight              loaded from backbone.body.layer1.0.conv1.weight              of shape (64, 64, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.conv2.weight              loaded from backbone.body.layer1.0.conv2.weight              of shape (64, 64, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.conv3.weight              loaded from backbone.body.layer1.0.conv3.weight              of shape (256, 64, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.downsample.0.weight       loaded from backbone.body.layer1.0.downsample.0.weight       of shape (256, 64, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.downsample.1.bias         loaded from backbone.body.layer1.0.downsample.1.bias         of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.downsample.1.running_mean loaded from backbone.body.layer1.0.downsample.1.running_mean of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.downsample.1.running_var  loaded from backbone.body.layer1.0.downsample.1.running_var  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.0.downsample.1.weight       loaded from backbone.body.layer1.0.downsample.1.weight       of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn1.bias                  loaded from backbone.body.layer1.1.bn1.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn1.running_mean          loaded from backbone.body.layer1.1.bn1.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn1.running_var           loaded from backbone.body.layer1.1.bn1.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn1.weight                loaded from backbone.body.layer1.1.bn1.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn2.bias                  loaded from backbone.body.layer1.1.bn2.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn2.running_mean          loaded from backbone.body.layer1.1.bn2.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn2.running_var           loaded from backbone.body.layer1.1.bn2.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn2.weight                loaded from backbone.body.layer1.1.bn2.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn3.bias                  loaded from backbone.body.layer1.1.bn3.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn3.running_mean          loaded from backbone.body.layer1.1.bn3.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn3.running_var           loaded from backbone.body.layer1.1.bn3.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.bn3.weight                loaded from backbone.body.layer1.1.bn3.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.conv1.weight              loaded from backbone.body.layer1.1.conv1.weight              of shape (64, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.conv2.weight              loaded from backbone.body.layer1.1.conv2.weight              of shape (64, 64, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.1.conv3.weight              loaded from backbone.body.layer1.1.conv3.weight              of shape (256, 64, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn1.bias                  loaded from backbone.body.layer1.2.bn1.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn1.running_mean          loaded from backbone.body.layer1.2.bn1.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn1.running_var           loaded from backbone.body.layer1.2.bn1.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn1.weight                loaded from backbone.body.layer1.2.bn1.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn2.bias                  loaded from backbone.body.layer1.2.bn2.bias                  of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn2.running_mean          loaded from backbone.body.layer1.2.bn2.running_mean          of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn2.running_var           loaded from backbone.body.layer1.2.bn2.running_var           of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn2.weight                loaded from backbone.body.layer1.2.bn2.weight                of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn3.bias                  loaded from backbone.body.layer1.2.bn3.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn3.running_mean          loaded from backbone.body.layer1.2.bn3.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn3.running_var           loaded from backbone.body.layer1.2.bn3.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.bn3.weight                loaded from backbone.body.layer1.2.bn3.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.conv1.weight              loaded from backbone.body.layer1.2.conv1.weight              of shape (64, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.conv2.weight              loaded from backbone.body.layer1.2.conv2.weight              of shape (64, 64, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer1.2.conv3.weight              loaded from backbone.body.layer1.2.conv3.weight              of shape (256, 64, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn1.bias                  loaded from backbone.body.layer2.0.bn1.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn1.running_mean          loaded from backbone.body.layer2.0.bn1.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn1.running_var           loaded from backbone.body.layer2.0.bn1.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn1.weight                loaded from backbone.body.layer2.0.bn1.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn2.bias                  loaded from backbone.body.layer2.0.bn2.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn2.running_mean          loaded from backbone.body.layer2.0.bn2.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn2.running_var           loaded from backbone.body.layer2.0.bn2.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn2.weight                loaded from backbone.body.layer2.0.bn2.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn3.bias                  loaded from backbone.body.layer2.0.bn3.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn3.running_mean          loaded from backbone.body.layer2.0.bn3.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn3.running_var           loaded from backbone.body.layer2.0.bn3.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.bn3.weight                loaded from backbone.body.layer2.0.bn3.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.conv1.weight              loaded from backbone.body.layer2.0.conv1.weight              of shape (128, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.conv2.weight              loaded from backbone.body.layer2.0.conv2.weight              of shape (128, 128, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.conv3.weight              loaded from backbone.body.layer2.0.conv3.weight              of shape (512, 128, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.downsample.0.weight       loaded from backbone.body.layer2.0.downsample.0.weight       of shape (512, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.downsample.1.bias         loaded from backbone.body.layer2.0.downsample.1.bias         of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.downsample.1.running_mean loaded from backbone.body.layer2.0.downsample.1.running_mean of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.downsample.1.running_var  loaded from backbone.body.layer2.0.downsample.1.running_var  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.0.downsample.1.weight       loaded from backbone.body.layer2.0.downsample.1.weight       of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn1.bias                  loaded from backbone.body.layer2.1.bn1.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn1.running_mean          loaded from backbone.body.layer2.1.bn1.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn1.running_var           loaded from backbone.body.layer2.1.bn1.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn1.weight                loaded from backbone.body.layer2.1.bn1.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn2.bias                  loaded from backbone.body.layer2.1.bn2.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn2.running_mean          loaded from backbone.body.layer2.1.bn2.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn2.running_var           loaded from backbone.body.layer2.1.bn2.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn2.weight                loaded from backbone.body.layer2.1.bn2.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn3.bias                  loaded from backbone.body.layer2.1.bn3.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn3.running_mean          loaded from backbone.body.layer2.1.bn3.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn3.running_var           loaded from backbone.body.layer2.1.bn3.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.bn3.weight                loaded from backbone.body.layer2.1.bn3.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.conv1.weight              loaded from backbone.body.layer2.1.conv1.weight              of shape (128, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.conv2.weight              loaded from backbone.body.layer2.1.conv2.weight              of shape (128, 128, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.1.conv3.weight              loaded from backbone.body.layer2.1.conv3.weight              of shape (512, 128, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn1.bias                  loaded from backbone.body.layer2.2.bn1.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn1.running_mean          loaded from backbone.body.layer2.2.bn1.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn1.running_var           loaded from backbone.body.layer2.2.bn1.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn1.weight                loaded from backbone.body.layer2.2.bn1.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn2.bias                  loaded from backbone.body.layer2.2.bn2.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn2.running_mean          loaded from backbone.body.layer2.2.bn2.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn2.running_var           loaded from backbone.body.layer2.2.bn2.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn2.weight                loaded from backbone.body.layer2.2.bn2.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn3.bias                  loaded from backbone.body.layer2.2.bn3.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn3.running_mean          loaded from backbone.body.layer2.2.bn3.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn3.running_var           loaded from backbone.body.layer2.2.bn3.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.bn3.weight                loaded from backbone.body.layer2.2.bn3.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.conv1.weight              loaded from backbone.body.layer2.2.conv1.weight              of shape (128, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.conv2.weight              loaded from backbone.body.layer2.2.conv2.weight              of shape (128, 128, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.2.conv3.weight              loaded from backbone.body.layer2.2.conv3.weight              of shape (512, 128, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn1.bias                  loaded from backbone.body.layer2.3.bn1.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn1.running_mean          loaded from backbone.body.layer2.3.bn1.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn1.running_var           loaded from backbone.body.layer2.3.bn1.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn1.weight                loaded from backbone.body.layer2.3.bn1.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn2.bias                  loaded from backbone.body.layer2.3.bn2.bias                  of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn2.running_mean          loaded from backbone.body.layer2.3.bn2.running_mean          of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn2.running_var           loaded from backbone.body.layer2.3.bn2.running_var           of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn2.weight                loaded from backbone.body.layer2.3.bn2.weight                of shape (128,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn3.bias                  loaded from backbone.body.layer2.3.bn3.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn3.running_mean          loaded from backbone.body.layer2.3.bn3.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn3.running_var           loaded from backbone.body.layer2.3.bn3.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.bn3.weight                loaded from backbone.body.layer2.3.bn3.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.conv1.weight              loaded from backbone.body.layer2.3.conv1.weight              of shape (128, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.conv2.weight              loaded from backbone.body.layer2.3.conv2.weight              of shape (128, 128, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer2.3.conv3.weight              loaded from backbone.body.layer2.3.conv3.weight              of shape (512, 128, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn1.bias                  loaded from backbone.body.layer3.0.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn1.running_mean          loaded from backbone.body.layer3.0.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn1.running_var           loaded from backbone.body.layer3.0.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn1.weight                loaded from backbone.body.layer3.0.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn2.bias                  loaded from backbone.body.layer3.0.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn2.running_mean          loaded from backbone.body.layer3.0.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn2.running_var           loaded from backbone.body.layer3.0.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn2.weight                loaded from backbone.body.layer3.0.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn3.bias                  loaded from backbone.body.layer3.0.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn3.running_mean          loaded from backbone.body.layer3.0.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn3.running_var           loaded from backbone.body.layer3.0.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.bn3.weight                loaded from backbone.body.layer3.0.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.conv1.weight              loaded from backbone.body.layer3.0.conv1.weight              of shape (256, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.conv2.weight              loaded from backbone.body.layer3.0.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.conv3.weight              loaded from backbone.body.layer3.0.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.downsample.0.weight       loaded from backbone.body.layer3.0.downsample.0.weight       of shape (1024, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.downsample.1.bias         loaded from backbone.body.layer3.0.downsample.1.bias         of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.downsample.1.running_mean loaded from backbone.body.layer3.0.downsample.1.running_mean of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.downsample.1.running_var  loaded from backbone.body.layer3.0.downsample.1.running_var  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.0.downsample.1.weight       loaded from backbone.body.layer3.0.downsample.1.weight       of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn1.bias                  loaded from backbone.body.layer3.1.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn1.running_mean          loaded from backbone.body.layer3.1.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn1.running_var           loaded from backbone.body.layer3.1.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn1.weight                loaded from backbone.body.layer3.1.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn2.bias                  loaded from backbone.body.layer3.1.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn2.running_mean          loaded from backbone.body.layer3.1.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn2.running_var           loaded from backbone.body.layer3.1.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn2.weight                loaded from backbone.body.layer3.1.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn3.bias                  loaded from backbone.body.layer3.1.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn3.running_mean          loaded from backbone.body.layer3.1.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn3.running_var           loaded from backbone.body.layer3.1.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.bn3.weight                loaded from backbone.body.layer3.1.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.conv1.weight              loaded from backbone.body.layer3.1.conv1.weight              of shape (256, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.conv2.weight              loaded from backbone.body.layer3.1.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.1.conv3.weight              loaded from backbone.body.layer3.1.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn1.bias                  loaded from backbone.body.layer3.2.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn1.running_mean          loaded from backbone.body.layer3.2.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn1.running_var           loaded from backbone.body.layer3.2.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn1.weight                loaded from backbone.body.layer3.2.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn2.bias                  loaded from backbone.body.layer3.2.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn2.running_mean          loaded from backbone.body.layer3.2.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn2.running_var           loaded from backbone.body.layer3.2.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn2.weight                loaded from backbone.body.layer3.2.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn3.bias                  loaded from backbone.body.layer3.2.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn3.running_mean          loaded from backbone.body.layer3.2.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn3.running_var           loaded from backbone.body.layer3.2.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.bn3.weight                loaded from backbone.body.layer3.2.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.conv1.weight              loaded from backbone.body.layer3.2.conv1.weight              of shape (256, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.conv2.weight              loaded from backbone.body.layer3.2.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.2.conv3.weight              loaded from backbone.body.layer3.2.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn1.bias                  loaded from backbone.body.layer3.3.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn1.running_mean          loaded from backbone.body.layer3.3.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn1.running_var           loaded from backbone.body.layer3.3.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn1.weight                loaded from backbone.body.layer3.3.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn2.bias                  loaded from backbone.body.layer3.3.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn2.running_mean          loaded from backbone.body.layer3.3.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn2.running_var           loaded from backbone.body.layer3.3.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn2.weight                loaded from backbone.body.layer3.3.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn3.bias                  loaded from backbone.body.layer3.3.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn3.running_mean          loaded from backbone.body.layer3.3.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn3.running_var           loaded from backbone.body.layer3.3.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.bn3.weight                loaded from backbone.body.layer3.3.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.conv1.weight              loaded from backbone.body.layer3.3.conv1.weight              of shape (256, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.conv2.weight              loaded from backbone.body.layer3.3.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.3.conv3.weight              loaded from backbone.body.layer3.3.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn1.bias                  loaded from backbone.body.layer3.4.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn1.running_mean          loaded from backbone.body.layer3.4.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn1.running_var           loaded from backbone.body.layer3.4.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn1.weight                loaded from backbone.body.layer3.4.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn2.bias                  loaded from backbone.body.layer3.4.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn2.running_mean          loaded from backbone.body.layer3.4.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn2.running_var           loaded from backbone.body.layer3.4.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn2.weight                loaded from backbone.body.layer3.4.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn3.bias                  loaded from backbone.body.layer3.4.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn3.running_mean          loaded from backbone.body.layer3.4.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn3.running_var           loaded from backbone.body.layer3.4.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.bn3.weight                loaded from backbone.body.layer3.4.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.conv1.weight              loaded from backbone.body.layer3.4.conv1.weight              of shape (256, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.conv2.weight              loaded from backbone.body.layer3.4.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.4.conv3.weight              loaded from backbone.body.layer3.4.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn1.bias                  loaded from backbone.body.layer3.5.bn1.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn1.running_mean          loaded from backbone.body.layer3.5.bn1.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn1.running_var           loaded from backbone.body.layer3.5.bn1.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn1.weight                loaded from backbone.body.layer3.5.bn1.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn2.bias                  loaded from backbone.body.layer3.5.bn2.bias                  of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn2.running_mean          loaded from backbone.body.layer3.5.bn2.running_mean          of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn2.running_var           loaded from backbone.body.layer3.5.bn2.running_var           of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn2.weight                loaded from backbone.body.layer3.5.bn2.weight                of shape (256,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn3.bias                  loaded from backbone.body.layer3.5.bn3.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn3.running_mean          loaded from backbone.body.layer3.5.bn3.running_mean          of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn3.running_var           loaded from backbone.body.layer3.5.bn3.running_var           of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.bn3.weight                loaded from backbone.body.layer3.5.bn3.weight                of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.conv1.weight              loaded from backbone.body.layer3.5.conv1.weight              of shape (256, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.conv2.weight              loaded from backbone.body.layer3.5.conv2.weight              of shape (256, 256, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer3.5.conv3.weight              loaded from backbone.body.layer3.5.conv3.weight              of shape (1024, 256, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn1.bias                  loaded from backbone.body.layer4.0.bn1.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn1.running_mean          loaded from backbone.body.layer4.0.bn1.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn1.running_var           loaded from backbone.body.layer4.0.bn1.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn1.weight                loaded from backbone.body.layer4.0.bn1.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn2.bias                  loaded from backbone.body.layer4.0.bn2.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn2.running_mean          loaded from backbone.body.layer4.0.bn2.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn2.running_var           loaded from backbone.body.layer4.0.bn2.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn2.weight                loaded from backbone.body.layer4.0.bn2.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn3.bias                  loaded from backbone.body.layer4.0.bn3.bias                  of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn3.running_mean          loaded from backbone.body.layer4.0.bn3.running_mean          of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn3.running_var           loaded from backbone.body.layer4.0.bn3.running_var           of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.bn3.weight                loaded from backbone.body.layer4.0.bn3.weight                of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.conv1.weight              loaded from backbone.body.layer4.0.conv1.weight              of shape (512, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.conv2.weight              loaded from backbone.body.layer4.0.conv2.weight              of shape (512, 512, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.conv3.weight              loaded from backbone.body.layer4.0.conv3.weight              of shape (2048, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.downsample.0.weight       loaded from backbone.body.layer4.0.downsample.0.weight       of shape (2048, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.downsample.1.bias         loaded from backbone.body.layer4.0.downsample.1.bias         of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.downsample.1.running_mean loaded from backbone.body.layer4.0.downsample.1.running_mean of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.downsample.1.running_var  loaded from backbone.body.layer4.0.downsample.1.running_var  of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.0.downsample.1.weight       loaded from backbone.body.layer4.0.downsample.1.weight       of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn1.bias                  loaded from backbone.body.layer4.1.bn1.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn1.running_mean          loaded from backbone.body.layer4.1.bn1.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn1.running_var           loaded from backbone.body.layer4.1.bn1.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn1.weight                loaded from backbone.body.layer4.1.bn1.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn2.bias                  loaded from backbone.body.layer4.1.bn2.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn2.running_mean          loaded from backbone.body.layer4.1.bn2.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn2.running_var           loaded from backbone.body.layer4.1.bn2.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn2.weight                loaded from backbone.body.layer4.1.bn2.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn3.bias                  loaded from backbone.body.layer4.1.bn3.bias                  of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn3.running_mean          loaded from backbone.body.layer4.1.bn3.running_mean          of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn3.running_var           loaded from backbone.body.layer4.1.bn3.running_var           of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.bn3.weight                loaded from backbone.body.layer4.1.bn3.weight                of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.conv1.weight              loaded from backbone.body.layer4.1.conv1.weight              of shape (512, 2048, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.conv2.weight              loaded from backbone.body.layer4.1.conv2.weight              of shape (512, 512, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.1.conv3.weight              loaded from backbone.body.layer4.1.conv3.weight              of shape (2048, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn1.bias                  loaded from backbone.body.layer4.2.bn1.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn1.running_mean          loaded from backbone.body.layer4.2.bn1.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn1.running_var           loaded from backbone.body.layer4.2.bn1.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn1.weight                loaded from backbone.body.layer4.2.bn1.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn2.bias                  loaded from backbone.body.layer4.2.bn2.bias                  of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn2.running_mean          loaded from backbone.body.layer4.2.bn2.running_mean          of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn2.running_var           loaded from backbone.body.layer4.2.bn2.running_var           of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn2.weight                loaded from backbone.body.layer4.2.bn2.weight                of shape (512,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn3.bias                  loaded from backbone.body.layer4.2.bn3.bias                  of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn3.running_mean          loaded from backbone.body.layer4.2.bn3.running_mean          of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn3.running_var           loaded from backbone.body.layer4.2.bn3.running_var           of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.bn3.weight                loaded from backbone.body.layer4.2.bn3.weight                of shape (2048,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.conv1.weight              loaded from backbone.body.layer4.2.conv1.weight              of shape (512, 2048, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.conv2.weight              loaded from backbone.body.layer4.2.conv2.weight              of shape (512, 512, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.layer4.2.conv3.weight              loaded from backbone.body.layer4.2.conv3.weight              of shape (2048, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.stem.bn1.bias                      loaded from backbone.body.stem.bn1.bias                      of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.stem.bn1.running_mean              loaded from backbone.body.stem.bn1.running_mean              of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.stem.bn1.running_var               loaded from backbone.body.stem.bn1.running_var               of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.stem.bn1.weight                    loaded from backbone.body.stem.bn1.weight                    of shape (64,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.body.stem.conv1.weight                  loaded from backbone.body.stem.conv1.weight                  of shape (64, 3, 7, 7)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner2.bias                     loaded from backbone.fpn.fpn_inner2.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner2.weight                   loaded from backbone.fpn.fpn_inner2.weight                   of shape (1024, 512, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner3.bias                     loaded from backbone.fpn.fpn_inner3.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner3.weight                   loaded from backbone.fpn.fpn_inner3.weight                   of shape (1024, 1024, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner4.bias                     loaded from backbone.fpn.fpn_inner4.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_inner4.weight                   loaded from backbone.fpn.fpn_inner4.weight                   of shape (1024, 2048, 1, 1)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer2.bias                     loaded from backbone.fpn.fpn_layer2.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer2.weight                   loaded from backbone.fpn.fpn_layer2.weight                   of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer3.bias                     loaded from backbone.fpn.fpn_layer3.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer3.weight                   loaded from backbone.fpn.fpn_layer3.weight                   of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer4.bias                     loaded from backbone.fpn.fpn_layer4.bias                     of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.fpn_layer4.weight                   loaded from backbone.fpn.fpn_layer4.weight                   of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.top_blocks.p6.bias                  loaded from backbone.fpn.top_blocks.p6.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.top_blocks.p6.weight                loaded from backbone.fpn.top_blocks.p6.weight                of shape (1024, 2048, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.top_blocks.p7.bias                  loaded from backbone.fpn.top_blocks.p7.bias                  of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:backbone.fpn.top_blocks.p7.weight                loaded from backbone.fpn.top_blocks.p7.weight                of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.anchor_generator.cell_anchors.0              loaded from rpn.anchor_generator.cell_anchors.0              of shape (9, 4)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.anchor_generator.cell_anchors.1              loaded from rpn.anchor_generator.cell_anchors.1              of shape (9, 4)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.anchor_generator.cell_anchors.2              loaded from rpn.anchor_generator.cell_anchors.2              of shape (9, 4)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.anchor_generator.cell_anchors.3              loaded from rpn.anchor_generator.cell_anchors.3              of shape (9, 4)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.anchor_generator.cell_anchors.4              loaded from rpn.anchor_generator.cell_anchors.4              of shape (9, 4)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_pred.bias                          loaded from rpn.head.bbox_pred.bias                          of shape (36,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_pred.weight                        loaded from rpn.head.bbox_pred.weight                        of shape (36, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.0.bias                       loaded from rpn.head.bbox_tower.0.bias                       of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.0.weight                     loaded from rpn.head.bbox_tower.0.weight                     of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.2.bias                       loaded from rpn.head.bbox_tower.2.bias                       of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.2.weight                     loaded from rpn.head.bbox_tower.2.weight                     of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.4.bias                       loaded from rpn.head.bbox_tower.4.bias                       of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.4.weight                     loaded from rpn.head.bbox_tower.4.weight                     of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.6.bias                       loaded from rpn.head.bbox_tower.6.bias                       of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.bbox_tower.6.weight                     loaded from rpn.head.bbox_tower.6.weight                     of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_logits.bias                         loaded from rpn.head.cls_logits.bias                         of shape (9,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_logits.weight                       loaded from rpn.head.cls_logits.weight                       of shape (9, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.0.bias                        loaded from rpn.head.cls_tower.0.bias                        of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.0.weight                      loaded from rpn.head.cls_tower.0.weight                      of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.2.bias                        loaded from rpn.head.cls_tower.2.bias                        of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.2.weight                      loaded from rpn.head.cls_tower.2.weight                      of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.4.bias                        loaded from rpn.head.cls_tower.4.bias                        of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.4.weight                      loaded from rpn.head.cls_tower.4.weight                      of shape (1024, 1024, 3, 3)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.6.bias                        loaded from rpn.head.cls_tower.6.bias                        of shape (1024,)
INFO:maskrcnn_benchmark.utils.model_serialization:rpn.head.cls_tower.6.weight                      loaded from rpn.head.cls_tower.6.weight                      of shape (1024, 1024, 3, 3)
compute_prediction(self, image)

	image: H, W=(438,512)

	image_tensor = self.transforms(image)

		transforms.py Compose class __call__  ====== BEGIN

		for t in self.transforms:
			image = <maskrcnn_benchmark.data.transforms.transforms.Resize object at 0x7f2652315080>(image)
			image = <maskrcnn_benchmark.data.transforms.transforms.ToTensor object at 0x7f2652315128>(image)
			image = <maskrcnn_benchmark.data.transforms.transforms.Normalize object at 0x7f26523150b8>(image)

		return image
		transforms.py Compose class __call__  ====== END

	image_tensor.shape: torch.Size([3, 480, 561])

	padding images for 32 divisible size on width and height
	image_list = to_image_list(image_tensor, 32).to(self.device)

	to_image_list(tensors, size_divisible=32) ====== BEGIN
		type(batched_imgs): <class 'torch.Tensor'>
		batched_imgs.shape: torch.Size([1, 3, 480, 576])
		image_sizes: [torch.Size([480, 561])]
		return ImageList(batched_imgs, image_sizes)
	to_image_list(tensors, size_divisible=32) ====== END

	image_list.image_sizes: [torch.Size([480, 561])]
	image_list.tensors.shape: torch.Size([1, 3, 480, 576])
	pred = self.model(image_list)


GeneralizedRCNN.forward(self, images, targets=None) ====================== BEGIN
type(images): <class 'maskrcnn_benchmark.structures.image_list.ImageList'>
targets: None
	if self.training == False: 
	images = to_image_list(images)

	to_image_list(tensors, size_divisible=0) ====== BEGIN
		if isinstance(tensors, ImageList):
		return tensors
	to_image_list(tensors, size_divisible=0) ====== END

	images.image_sizes: [torch.Size([480, 561])]
	images.tensors.shape: torch.Size([1, 3, 480, 576])
	model.backbone.forward(images.tensors) BEFORE

=========================================== Resnet.forward(self, x) BEGIN
	param x.shape=torch.Size([1, 3, 480, 576]) 
	x = self.stem(x)
	x.shape: torch.Size([1, 64, 120, 144])
	for stage_name in self.stages:
		stage_name: layer1
		toutput shape of layer1: torch.Size([1, 256, 120, 144])
			outputs.append(x) stage_name: layer1
			x.shape: torch.Size([1, 256, 120, 144])
		stage_name: layer2
		toutput shape of layer2: torch.Size([1, 512, 60, 72])
			outputs.append(x) stage_name: layer2
			x.shape: torch.Size([1, 512, 60, 72])
		stage_name: layer3
		toutput shape of layer3: torch.Size([1, 1024, 30, 36])
			outputs.append(x) stage_name: layer3
			x.shape: torch.Size([1, 1024, 30, 36])
		stage_name: layer4
		toutput shape of layer4: torch.Size([1, 2048, 15, 18])
			outputs.append(x) stage_name: layer4
			x.shape: torch.Size([1, 2048, 15, 18])

	ResNet::forward return value
		outputs[0]: torch.Size([1, 256, 120, 144])
		outputs[1]: torch.Size([1, 512, 60, 72])
		outputs[2]: torch.Size([1, 1024, 30, 36])
		outputs[3]: torch.Size([1, 2048, 15, 18])

	return outputs

=========================================== Resnet.forward() END


FPN.forward(self,x) ====== BEGIN
	======forward param: x  = [C1, C2, C3, C4] 
	len(x) = 4
	C[1].shape : torch.Size([1, 256, 120, 144])
	C[2].shape : torch.Size([1, 512, 60, 72])
	C[3].shape : torch.Size([1, 1024, 30, 36])
	C[4].shape : torch.Size([1, 2048, 15, 18])

	x[-1].shape = torch.Size([1, 2048, 15, 18])

	last_inner = fpn_inner4(C4)
		self.innerblocks[-1] = Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
		last_inner.shape = torch.Size([1, 1024, 15, 18])


	results.append(fpn_layer4(last_inner))
		self.layer_blocks[-1]: Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		results[0].shape: torch.Size([1, 1024, 15, 18])

	for feature, inner_block, layer_block
			in zip[(x[:-1][::-1], self.inner_blocks[:-1][::-1], self.layer_blocks[:-1][::-1]):

		====================================
		iteration 0 summary
		====================================
		feature.shape: torch.Size([1, 1024, 30, 36])
		inner_block: fpn_inner3 ==> Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
		layer_block: fpn_layer3 ==> Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		last_inner.shape: torch.Size([1, 1024, 15, 18])
		====================================

		--------------------------------------------------
		0.1 Upsample : replace with Decovolution in caffe
		layer name in caffe: fpn_inner3_upsample = Deconvolution(last_inner)
		--------------------------------------------------
		inner_top_down = interpolate(last_inner, scale_factor=2, mode='nearest')

		last_inner.shape: torch.Size([1, 1024, 15, 18])
		inner_top_down.shape : torch.Size([1, 1024, 30, 36])
		--------------------------------------------------

		--------------------------------------------------
		0.2 inner_lateral = Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))(feature)
		layer name in caffe: fpn_inner3_lateral=Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))(feature)
		--------------------------------------------------
			inner_block: fpn_inner3 ==> Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
			input: feature.shape: torch.Size([1, 1024, 30, 36])
			output: inner_lateral.shape: torch.Size([1, 1024, 30, 36])

		--------------------------------------------------

		--------------------------------------------------
		0.3 Elementwise Addition: replaced with eltwise in caffe
		layer in caffe: eltwise_3 = eltwise(fpn_inner3_lateral, fpn_inner3_upsample )
		--------------------------------------------------
		last_inner = inner_lateral + inner_top_down
			inner_lateral.shape: torch.Size([1, 1024, 30, 36])
			inner_top_down.shape: torch.Size([1, 1024, 30, 36])
			last_inner.shape : torch.Size([1, 1024, 30, 36])
		--------------------------------------------------

		--------------------------------------------------
		0.4 results.insert(0, Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))(last_inner)
		layer in caffe: fpn_layer3 = Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))(eltwise_3)
		--------------------------------------------------
			layer_block: fpn_layer3 ==> Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
			input: last_inner.shape = torch.Size([1, 1024, 30, 36])
		--------------------------------------------------

		--------------------------------------------------
		results after iteration 0
		--------------------------------------------------
			results[0].shape: torch.Size([1, 1024, 30, 36])
			results[1].shape: torch.Size([1, 1024, 15, 18])
		--------------------------------------------------

	for loop END

		====================================
		iteration 1 summary
		====================================
		feature.shape: torch.Size([1, 512, 60, 72])
		inner_block: fpn_inner2 ==> Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
		layer_block: fpn_layer2 ==> Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
		last_inner.shape: torch.Size([1, 1024, 30, 36])
		====================================

		--------------------------------------------------
		1.1 Upsample : replace with Decovolution in caffe
		layer name in caffe: fpn_inner2_upsample = Deconvolution(last_inner)
		--------------------------------------------------
		inner_top_down = interpolate(last_inner, scale_factor=2, mode='nearest')

		last_inner.shape: torch.Size([1, 1024, 30, 36])
		inner_top_down.shape : torch.Size([1, 1024, 60, 72])
		--------------------------------------------------

		--------------------------------------------------
		1.2 inner_lateral = Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))(feature)
		layer name in caffe: fpn_inner2_lateral=Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))(feature)
		--------------------------------------------------
			inner_block: fpn_inner2 ==> Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
			input: feature.shape: torch.Size([1, 512, 60, 72])
			output: inner_lateral.shape: torch.Size([1, 1024, 60, 72])

		--------------------------------------------------

		--------------------------------------------------
		1.3 Elementwise Addition: replaced with eltwise in caffe
		layer in caffe: eltwise_2 = eltwise(fpn_inner2_lateral, fpn_inner2_upsample )
		--------------------------------------------------
		last_inner = inner_lateral + inner_top_down
			inner_lateral.shape: torch.Size([1, 1024, 60, 72])
			inner_top_down.shape: torch.Size([1, 1024, 60, 72])
			last_inner.shape : torch.Size([1, 1024, 60, 72])
		--------------------------------------------------

		--------------------------------------------------
		1.4 results.insert(0, Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))(last_inner)
		layer in caffe: fpn_layer2 = Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))(eltwise_2)
		--------------------------------------------------
			layer_block: fpn_layer2 ==> Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
			input: last_inner.shape = torch.Size([1, 1024, 60, 72])
		--------------------------------------------------

		--------------------------------------------------
		results after iteration 1
		--------------------------------------------------
			results[0].shape: torch.Size([1, 1024, 60, 72])
			results[1].shape: torch.Size([1, 1024, 30, 36])
			results[2].shape: torch.Size([1, 1024, 15, 18])
		--------------------------------------------------

	for loop END


	if isinstance(self.top_blocks, LastLevelP6P7):
		last_result = self.top_blocks(x[-1], results[-1])

		LastLevelP6P7.forward(self, c5, p5) ============= BEGIN 
			c5.shape: torch.Size([1, 2048, 15, 18])
			p5.shape: torch.Size([1, 1024, 15, 18])

			if (self.use_P5 == False)
				x=c5
			x.shape = torch.Size([1, 2048, 15, 18])
			p6 = self.p6(x)
				self.p6: Conv2d(2048, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
				p6.shape: torch.Size([1, 1024, 8, 9])

			p7 = self.p7(F.relu(p6))
				self.p7: Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
				p7.shape: torch.Size([1, 1024, 4, 5])

			returns [p6, p7]
		LastLevelP6P7.forward(self, c5, p5) ============= END


		results.extend(last_results)

		results
		result[0].shape: torch.Size([1, 1024, 60, 72])
		result[1].shape: torch.Size([1, 1024, 30, 36])
		result[2].shape: torch.Size([1, 1024, 15, 18])
		result[3].shape: torch.Size([1, 1024, 8, 9])
		result[4].shape: torch.Size([1, 1024, 4, 5])

	return tuple(results)


FPN.forward(self,x) ====== END
	model.backbone.forward(images.tensors) DONE
proposals, proposal_losses = self.rpn(images, features, targets) BEFORE


=========================================== RetinaNetModule.forward(self, images, features, targets=None): BEGIN
	Params:
		type(images.image_size): <class 'list'>
		type(images.tensors): <class 'torch.Tensor'>
		len(features)): 5
			feature[0].shape: torch.Size([1, 1024, 60, 72])
			feature[1].shape: torch.Size([1, 1024, 30, 36])
			feature[2].shape: torch.Size([1, 1024, 15, 18])
			feature[3].shape: torch.Size([1, 1024, 8, 9])
			feature[4].shape: torch.Size([1, 1024, 4, 5])
self.head: RetinaNetHead(
  (cls_tower): Sequential(
    (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
    (4): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): ReLU()
    (6): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU()
  )
  (bbox_tower): Sequential(
    (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
    (4): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): ReLU()
    (6): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU()
  )
  (cls_logits): Conv2d(1024, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bbox_pred): Conv2d(1024, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
box_cls, box_regression = self.head(features)


=========================================== RetinaNetHead.forward(self, x): BEGIN
	Param:
		len(x)): 5 x is features returned from FPN
			x[0].shape: torch.Size([1, 1024, 60, 72])
			x[1].shape: torch.Size([1, 1024, 30, 36])
			x[2].shape: torch.Size([1, 1024, 15, 18])
			x[3].shape: torch.Size([1, 1024, 8, 9])
			x[4].shape: torch.Size([1, 1024, 4, 5])
logits = []
bbox_reg = []



for feature in x:
	===== iteration: 0 ====
	feature[0].shape: torch.Size([1, 1024, 60, 72])

	cls_tower => cls_logits => logits[]
	logits.append(self.cls_logits(self.cls_tower(feature)))

	bbox_tower => bbox_pre => bbox_reg[]
	bbox_reg.append(self.bbox_pred(self.bbox_tower(feature)))

	===== iteration: 1 ====
	feature[1].shape: torch.Size([1, 1024, 30, 36])

	cls_tower => cls_logits => logits[]
	logits.append(self.cls_logits(self.cls_tower(feature)))

	bbox_tower => bbox_pre => bbox_reg[]
	bbox_reg.append(self.bbox_pred(self.bbox_tower(feature)))

	===== iteration: 2 ====
	feature[2].shape: torch.Size([1, 1024, 15, 18])

	cls_tower => cls_logits => logits[]
	logits.append(self.cls_logits(self.cls_tower(feature)))

	bbox_tower => bbox_pre => bbox_reg[]
	bbox_reg.append(self.bbox_pred(self.bbox_tower(feature)))

	===== iteration: 3 ====
	feature[3].shape: torch.Size([1, 1024, 8, 9])

	cls_tower => cls_logits => logits[]
	logits.append(self.cls_logits(self.cls_tower(feature)))

	bbox_tower => bbox_pre => bbox_reg[]
	bbox_reg.append(self.bbox_pred(self.bbox_tower(feature)))

	===== iteration: 4 ====
	feature[4].shape: torch.Size([1, 1024, 4, 5])

	cls_tower => cls_logits => logits[]
	logits.append(self.cls_logits(self.cls_tower(feature)))

	bbox_tower => bbox_pre => bbox_reg[]
	bbox_reg.append(self.bbox_pred(self.bbox_tower(feature)))

 ==== logits ====
logits[0].shape: torch.Size([1, 9, 60, 72])
logits[1].shape: torch.Size([1, 9, 30, 36])
logits[2].shape: torch.Size([1, 9, 15, 18])
logits[3].shape: torch.Size([1, 9, 8, 9])
logits[4].shape: torch.Size([1, 9, 4, 5])

 ==== bbox_reg ====
bbox_reg[0].shape: torch.Size([1, 36, 60, 72])
bbox_reg[1].shape: torch.Size([1, 36, 30, 36])
bbox_reg[2].shape: torch.Size([1, 36, 15, 18])
bbox_reg[3].shape: torch.Size([1, 36, 8, 9])
bbox_reg[4].shape: torch.Size([1, 36, 4, 5])

return logits, bbox_reg


=========================================== RetinaNetHead.forward(self, x): END
self.anchor_generator: AnchorGenerator(
  (cell_anchors): BufferList()
)
anchors = self.anchor_generator(images, features)
=================   AnchorGenerator.forward(image_list, feature_maps) BEGIN
	Params:
		image_list:
			len(image_list.image_sizes): 1
			image_list.image_sizes[0]: torch.Size([480, 561])
			len(image_list.tensors): 1
			image_list.tensors[0].shape: torch.Size([3, 480, 576])
		feature_maps:
			feature_maps[0].shape: torch.Size([1, 1024, 60, 72])
			feature_maps[1].shape: torch.Size([1, 1024, 30, 36])
			feature_maps[2].shape: torch.Size([1, 1024, 15, 18])
			feature_maps[3].shape: torch.Size([1, 1024, 8, 9])
			feature_maps[4].shape: torch.Size([1, 1024, 4, 5])

grid_sizes = [feature_map.shape[-2:] for feature_map in feature_maps]
anchors_over_all_feature_maps = self.grid_anchors(grid_sizes)
=================   AnchorGenerator.grid_anchors(grid_sizes) BEGIN
	Param:
		grid_sizes: [torch.Size([60, 72]), torch.Size([30, 36]), torch.Size([15, 18]), torch.Size([8, 9]), torch.Size([4, 5])]
return anchors
=================   AnchorGenerator.grid_anchors(grid_sizes) END
anchors = []
for i, (image_height, image_width) in enumerate(image_list.image_sizes):

	anchors_in_image = []

	for anchors_per_feature_map in anchors_over_all_feature_maps:

		boxlist = BoxList( anchors_per_feature_map, (image_width, image_height), mode="xyxy" )
		boxlist:
			BoxList(num_boxes=38880, image_width=561, image_height=480, mode=xyxy)

		self.add_visibility_to(boxlist)

=================   AnchorGenerator.add_visibitity_to(boxlist) BEGIN
=================   AnchorGenerator.add_visibitity_to(boxlist) END
		boxlist:
			BoxList(num_boxes=38880, image_width=561, image_height=480, mode=xyxy)

		anchors_in_image.append(boxlist)

		boxlist = BoxList( anchors_per_feature_map, (image_width, image_height), mode="xyxy" )
		boxlist:
			BoxList(num_boxes=9720, image_width=561, image_height=480, mode=xyxy)

		self.add_visibility_to(boxlist)

=================   AnchorGenerator.add_visibitity_to(boxlist) BEGIN
=================   AnchorGenerator.add_visibitity_to(boxlist) END
		boxlist:
			BoxList(num_boxes=9720, image_width=561, image_height=480, mode=xyxy)

		anchors_in_image.append(boxlist)

		boxlist = BoxList( anchors_per_feature_map, (image_width, image_height), mode="xyxy" )
		boxlist:
			BoxList(num_boxes=2430, image_width=561, image_height=480, mode=xyxy)

		self.add_visibility_to(boxlist)

=================   AnchorGenerator.add_visibitity_to(boxlist) BEGIN
=================   AnchorGenerator.add_visibitity_to(boxlist) END
		boxlist:
			BoxList(num_boxes=2430, image_width=561, image_height=480, mode=xyxy)

		anchors_in_image.append(boxlist)

		boxlist = BoxList( anchors_per_feature_map, (image_width, image_height), mode="xyxy" )
		boxlist:
			BoxList(num_boxes=648, image_width=561, image_height=480, mode=xyxy)

		self.add_visibility_to(boxlist)

=================   AnchorGenerator.add_visibitity_to(boxlist) BEGIN
=================   AnchorGenerator.add_visibitity_to(boxlist) END
		boxlist:
			BoxList(num_boxes=648, image_width=561, image_height=480, mode=xyxy)

		anchors_in_image.append(boxlist)

		boxlist = BoxList( anchors_per_feature_map, (image_width, image_height), mode="xyxy" )
		boxlist:
			BoxList(num_boxes=180, image_width=561, image_height=480, mode=xyxy)

		self.add_visibility_to(boxlist)

=================   AnchorGenerator.add_visibitity_to(boxlist) BEGIN
=================   AnchorGenerator.add_visibitity_to(boxlist) END
		boxlist:
			BoxList(num_boxes=180, image_width=561, image_height=480, mode=xyxy)

		anchors_in_image.append(boxlist)

		anchors_in_image:
			[BoxList(num_boxes=38880, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=9720, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=2430, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=648, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=180, image_width=561, image_height=480, mode=xyxy)]

		anchors.append(anchors_in_image)

		anchors:
			[[BoxList(num_boxes=38880, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=9720, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=2430, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=648, image_width=561, image_height=480, mode=xyxy), BoxList(num_boxes=180, image_width=561, image_height=480, mode=xyxy)]]

return anchors
=================   AnchorGenerator.forward(image_list, feature_maps) END
if self.training == False
	return self._forward_test(anchors, box_cls, box_regression)


=========================================== RetinaNetModule.forward(self, images, features, targets=None): END


=========================================== RetinaNetModule._forward_test(self, anchors, box_cls, box_regression): BEGIN
params:
	len(anchors)
: 1
	len(box_cls)
: 5
	len(box_regression): 5
self.box_selector_test: RetinaNetPostProcessor()
boxes = self.box_selector_test(anchors, box_cls, box_regression)
========== RPNPostProcessing.forward() BEGIN
========== RPNPostProcessing.forward() END
len(boxes): 1
return boxes, {} # {} is just empty dictionayr


=========================================== RetinaNetModule._forward_test(self, anchors, box_cls, box_regression): END
proposals, proposal_losses = self.rpn(images, features, targets) DONE
x = features
result = proposals
return result
GeneralizedRCNN.forward(self, images, targets=None) ====================== END
